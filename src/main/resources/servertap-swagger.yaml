openapi: 3.0.2

# Basic info
info:
  title: ServerTap API
  description: ServerTap is a REST API for Bukkit/Spigot/PaperMC Minecraft servers.
  version: 1.0-SNAPSHOT

servers:
  - url: http://your-minecraft-server.com/servertap/v1

# Response types
components:
  schemas:
    Whitelist:
      type: object
      properties:
        uuid:
          type: string
          description: The player's UUID
        name:
          type: string
          description: The player's name as set in the whitelist
      required:
        - uuid
    World:
      description: A Minecraft world
      properties:
        name:
          type: string
          description: The name of the world
        time:
          type: number
          format: int64
          description: The time of day
        storm:
          type: boolean
          description: True if there is currently a storm
        thundering:
          type: boolean
          description: True if it is currently thundering
        generateStructures:
          type: boolean
          description: True if the world can generate structures
        allowAnimals:
          type: boolean
          description: True if animals can spawn
        allowMonsters:
          type: boolean
          description: True if monsters can spawn
        difficulty:
          type: integer
          description: Peaceful (0), Easy (1), Normal (2), Hard (3)
        environment:
          type: integer
          description: Overworld (0), Nether (-1), End (1)
        seed:
          type: number
          format: int64
          description: The world seed
    Server:
      description: A Bukkit/Spigot/Paper server
      properties:
        name:
          type: string
          description: The name of the server
    Player:
      description: An online player
      properties:
        uuid:
          type: string
          description: The Player's UUID
        displayName:
          type: string
          description: The Player's display name
        address:
          type: string
          description: The address the Player is connected from (usually an IP)
        port:
          type: integer
          description: The port the Player is connected from
        exhaustion:
          type: number
          format: float
          description: Current exhaustion level
        exp:
          type: number
          format: float
          description: Current exp towards next level
        whitelisted:
          type: boolean
          description: True if this Player is on the server's whitelist
        banned:
          type: boolean
          description: True if this Player is banned
        op:
          type: boolean
          description: True if this Player is OP
        
      required:  
        - uuid
        - name

# Resource endpoints
paths:
  /whitelist:
    get:
      description: Get a list of all whitelisted Players
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Whitelist'
    post:
      description: Add a player to the whitelist
      responses:
        '200':
          description: OK
  /players:
    get:
      summary: Gets all currently online Players
      parameters:
        - name: uuid
          in: query
          required: false
          description: UUID of a specific Player to get
          schema:
            type : string
            format: uuid
            minimum: 1
        - name: name
          in: query
          required: false
          description: Name of a specific Player to get
          schema:
            type : string
            format: uuid
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Player'
  /players/{uuid}:
    get:
      summary: Gets one specify currently online Players by their UUID
      parameters:
        - name: uuid
          in: path
          required: true
          description: UUID of a specific Player to get
          schema:
            type : string
            format: uuid
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
